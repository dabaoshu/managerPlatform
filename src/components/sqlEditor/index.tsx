import type { MonacoEditorProps } from 'react-monaco-editor';
import MonacoEditor from 'react-monaco-editor';
export function SqlEditor(props: MonacoEditorProps) {
  const { options = {}, ...rest } = props;
  return (
    <MonacoEditor
      theme="vs-dark"
      height={300}
      options={{
        lineDecorationsWidth: 4,
        fontSize: 12,
        selectOnLineNumbers: true,
        wordWrapColumn: 70, // 一行多少字符
        wordWrap: 'wordWrapColumn', // 一行文字超出，是否换行
        minimap: {
          enabled: true, // 是否启用小地图的渲染
        },
        ...options,
      }}
      {...rest}
    />
  );
}

// monaco.languages.register({
//   id: 'clickhouse',
//   extensions: ['.sql'],
//   aliases: ['ClickHouse', 'clickhouse'],
//   mimetypes: ['text/x-clickhouse'],
// });

// monaco.languages.setMonarchTokensProvider('clickhouse', {
//   keywords: [
//     'alter',
//     'and',
//     'as',
//     'asc',
//     'between',
//     'by',
//     'count',
//     'create',
//     'delete',
//     'desc',
//     'distinct',
//     'drop',
//     'from',
//     'group',
//     'having',
//     'in',
//     'insert',
//     'into',
//     'is',
//     'join',
//     'like',
//     'not',
//     'on',
//     'or',
//     'order',
//     'select',
//     'set',
//     'table',
//     'union',
//     'update',
//     'values',
//     'where',
//     'limit',
//     'Int8',
//     'Int16',
//     'Int32',
//     'Int64',
//     'Int128',
//     'Int256',
//     'UInt8',
//     'UInt16',
//     'UInt32',
//     'UInt64',
//     'UInt128',
//     'UInt256',
//     'Float32',
//     'Float64',
//     'Decimal',
//     'String',
//     'FixedString',
//     'UUID',
//     'Date',
//     'Date32',
//     'DateTime',
//     'DateTime64',
//     'Enum',
//     'LowCardinality',
//     'Array',
//     'AggregateFunction',
//     'Nested',
//     'Tuple',
//     'Nullable',
//     'SimpleAggregateFunction',
//     'ALL',
//     'ANY',
//     'ASOF',
//     'INNER',
//     'LEFT',
//     'RIGHT',
//     'FULL',
//     'CROSS',
//     'OUTER',
//     'SEMI',
//     'ANTI',
//     'JOIN',
//     'USING',
//     'WITH',
//     'CUBE',
//     'TOTALS',
//     'HAVING',
//     'ORDER',
//     'BY',
//     'FROM',
//     'TO',
//     'FILL',
//     'STEP',
//     'LIMIT',
//     'ARRAY',
//     'DISTINCT',
//     'EXCEPT',
//     'FORMAT',
//     'INTO',
//     'OUTFILE',
//     'PREWHERE',
//     'SAMPLE',
//     'UNION',
//     'FROM',
//     'DATABASE',
//     'TABLE',
//     'VIEW',
//     'MATERIALIZED',
//     'DICTIONARY',
//     'FUNCTION',
//     'USER',
//     'ROLE',
//     'ROW',
//     'POLICY',
//     'QUOTA',
//     'SETTINGS',
//     'PROFILE',
//     'ALTER',
//     'COLUMN',
//     'PARTITION',
//     'DELETE',
//     'UPDATE',
//     'INDEX',
//     'CONSTRANINT',
//     'TTL',
//     'USER',
//     'QUOTA',
//     'ROLE',
//     'PROJECTION',
//     'SYSTEM',
//     'SHOW',
//     'GRANT',
//     'EXPLAIN',
//     'REVOKE',
//     'ATTACH',
//     'DESCRIBE',
//     'DETACH',
//     'DROP',
//     'EXISTS',
//     'KILL',
//     'OPTIMIZE',
//     'RENAME',
//     'EXCHANGE',
//     'SET',
//     'TRUNCATE',
//     'USE',
//     'WATCH',
//     'ON',
//     'IN',
//     'CLUSTER',
//     'ROLLUP',
//     'SYNC',
//     'NULL',
//     'CAST',
//     'MergeTree',
//     'SummingMergeTree',
//     'AggregatingMergeTree',
//     'CollapsingMergeTree',
//     'VersionedCollapsingMergeTree',
//     'GraphiteMergeTree',
//     'ReplacingMergeTRee',
//     'ReplicatedMergeTree',
//     'ReplicatedSummingMergeTree',
//     'ReplicatedReplacingMergeTree',
//     'ReplicatedAggregatingMergeTree',
//     'ReplicatedCollapsingMergeTree',
//     'ReplicatedVersionedCollapsingMergeTree',
//     'ReplicatedGraphiteMergeTree',
//   ],
//   ignoreCase: true,
//   operators: [
//     '=',
//     '>',
//     '<',
//     '!',
//     '~',
//     '>=',
//     '<=',
//     '==',
//     '===',
//     '!=',
//     '!==',
//     '+',
//     '-',
//     '*',
//     '/',
//     '&',
//     '|',
//     '^',
//     '%',
//     '<<',
//     '>>',
//     '>>>',
//     '+=',
//     '-=',
//     '*=',
//     '/=',
//     '&=',
//     '|=',
//     '^=',
//     '%=',
//     '<<=',
//     '>>=',
//     '>>>=',
//     '=>',
//     '->',
//     '++',
//     '--',
//   ],
//   builtins: [
//     // 内置函数
//     'count',
//     'min',
//     'max',
//     'sum',
//     'avg',
//     'any',
//     'stddevPop',
//     'stddevSamp',
//     // ...其他内置函数
//   ],

//   dataTypes: [
//     // 数据类型
//     'Int8',
//     'Int16',
//     'Int32',
//     'Int64',
//     'Int128',
//     'Int256',
//     'UInt8',
//     'UInt16',
//     'UInt32',
//     'UInt64',
//     'UInt128',
//     'UInt256',
//     'Float32',
//     'Float64',
//     'Decimal',
//     'String',
//     'FixedString',
//     'UUID',
//     'Date',
//     'Date32',
//     'DateTime',
//     'DateTime64',
//     'Enum',
//     'LowCardinality',
//     'Array',
//     'AggregateFunction',
//     'Nested',
//     'Tuple',
//     'Nullable',
//     'SimpleAggregateFunction',
//     'ALL',
//     'ANY',
//     'ASOF',
//     'INNER',
//     'LEFT',
//     'RIGHT',
//     // ...其他数据类型
//   ],
//   symbols: /[=><!~?:&|+\-*/^%]+/,

//   tokenizer: {
//     root: [
//       [/[A-Z][\w\$]*/, { token: 'keyword' }],
//       // Operators
//       [/(\+|-|\*|\/|<|>|=|!|%|&|\^|\|)/, { token: 'operator' }],
//       // [/@operators/, { token: 'operator' }],
//       // Numbers
//       [/\d+\.\d+/, 'number.float'],
//       [/\d+/, 'number'],
//       // Strings
//       [/\'([^\'\\]|\\.)*\'/, 'string'],
//       // Identifiers and default
//       [/[a-z]\w*/, 'identifier'],
//       [/[A-Z]\w*/, 'type.identifier'],
//       // White spaces and comments
//       { include: '@whitespace' },
//       [/--.*$/, 'comment'],
//       [/\/\*/, { token: 'comment.quote', bracket: '@open', next: '@comment' }],
//     ],

//     comment: [
//       [/[^*/]+/, 'comment'],
//       [/\*\//, { token: 'comment.quote', bracket: '@close', next: '@pop' }],
//       [/./, 'comment'],
//     ],

//     whitespace: [
//       [/[ \t\r\n]+/, 'white'],
//       [/\/\*/, 'comment', '@comment'],
//       [/\/\/.*$/, 'comment'],
//     ],
//   },
// });
